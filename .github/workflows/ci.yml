name: CI/CD Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  backend-check:
    runs-on: ubuntu-latest
    name: Backend Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Run backend tests
        working-directory: ./backend
        run: npm test

  frontend-check:
    runs-on: ubuntu-latest
    name: Frontend Check

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build
      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

  integration-test:
    runs-on: ubuntu-latest
    name: Integration Test
    needs: [backend-check, frontend-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "18"

      - name: Install backend dependencies
        working-directory: ./backend
        run: npm install

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm install

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

      - name: Copy frontend build to backend
        run: cp -r frontend/build backend/public

      - name: Start backend server
        working-directory: ./backend
        run: |
          npm start &
          sleep 10

      - name: Test API endpoints
        run: |
          # Test health endpoint
          curl -f http://localhost:4000/health || exit 1

          # Test products endpoint
          curl -f http://localhost:4000/products || exit 1

          # Test login endpoint
          LOGIN_RESPONSE=$(curl -s -X POST http://localhost:4000/login \
            -H "Content-Type: application/json" \
            -d '{"email":"user@example.com","password":"password123"}') || exit 1
          echo "$LOGIN_RESPONSE" | grep -q 'token' || { echo "Login did not return token"; exit 1; }
          TOKEN=$(echo "$LOGIN_RESPONSE" | jq -r '.token')
          if [ -z "$TOKEN" ] || [ "$TOKEN" = "null" ]; then echo "Failed to parse token"; exit 1; fi

          # Test GraphQL userProfile with token
          GRAPHQL_QUERY='{"query":"query { userProfile { id email name } }"}'
          curl -f -X POST http://localhost:4000/graphql \
            -H "Content-Type: application/json" \
            -H "Authorization: Bearer $TOKEN" \
            -d "$GRAPHQL_QUERY" | jq -e '.data.userProfile.email == "user@example.com"' > /dev/null || {
              echo "GraphQL userProfile failed"; exit 1; }

  docker-build:
    runs-on: ubuntu-latest
    name: Docker Build Test
    needs: [backend-check, frontend-check]

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        uses: docker/build-push-action@v5
        with:
          context: .
          push: false
          tags: ecommerce-app:test

      - name: Test Docker image
        run: |
          docker run -d -p 4000:4000 --name test-container ecommerce-app:test
          sleep 10
          curl -f http://localhost:4000/health || exit 1
          docker stop test-container
          docker rm test-container
